To make the get() and put() operations of a LRU cache O(1) time in the worst case, we need to combine a hash map with a doubly-linked list. The reason we use a doubly-linked list is to have pointers both forward and backwards to know what nodes came before a specific node. This allows us to traverse our linked list backwards, which is useful for an LRU cache and order of usage of items. The linked list allows us to access the head and the tail in O(1) constant time. The hash map, however, will map items to linked list nodes, thereby making the lookup time O(1) for specific values. This eliminates the need to traverse the linked list in O(n) time. The space complexity will be O(n) in the worst case, because we need to use two data structures, a linked list of length n, and a hash map holding n items.